name: Deploy Infrastructure and Configure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform Action (Apply/Destroy)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/${{ github.ref_name == 'main' && 'prod' || github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply or Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          fi

      - name: Copy Ansible Inventory locally
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          mkdir -p upload
          cp ../../ansible/inventory.ini upload/inventory.ini

      - name: Upload Ansible Inventory (if Apply is selected)
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: inventory
          path: upload/inventory.ini

  ansible:
    name: Run Ansible Playbook
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Ansible Inventory
        uses: actions/download-artifact@v4
        with:
          name: inventory
          path: ansible/

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Create vault password file
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt

      - name: Set web_environment dynamically
        run: |
          ENVIRONMENT=${{ github.ref_name }}
          if [ "$ENVIRONMENT" = "main" ]; then
            ENVIRONMENT="prod"
          fi
          echo "Setting web_environment to $ENVIRONMENT"
          sed -i "s/^web_environment: .*/web_environment: ${ENVIRONMENT}/" group_vars/webservers/main.yml

      - name: Set up SSH private key for Ansible (use GitHub secret)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          
      - name: Run Playbook
        run: ansible-playbook playbook.yml --vault-password-file vault_pass.txt
